# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def splitListToParts(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: List[ListNode]
        """
        # Count the number of nodes in the linked list
        n = 0
        curr = head
        while curr:
            n += 1
            curr = curr.next
        
        # Calculate the size of each part and the number of leftover nodes
        part_size = n // k
        num_large_parts = n % k
        
        # Create the parts
        curr = head
        parts = []
        for i in range(k):
            parts.append(curr)
            size = part_size + (i < num_large_parts)
            for j in range(size-1):
                if curr:
                    curr = curr.next
            if curr:
                temp = curr.next
                curr.next = None
                curr = temp
        
        return parts
