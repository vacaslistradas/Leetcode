# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head:
            return None

        # Determine the length of the linked list
        count = 1
        tail = head
        while tail.next:
            count += 1
            tail = tail.next

        # Adjust the rotation amount so it's less than the length of the linked list
        k = k % count

        if k == 0:
            return head

        # Move the tail node k steps forward
        tail.next = head
        for i in range(count - k):
            tail = tail.next

        # The new head is the node after the tail
        new_head = tail.next
        tail.next = None

        return new_head
