# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeTwoLists(self, list1, list2):
        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        top = cur = ListNode(0)

        if list1 == None:
            return list2
        elif list2 == None:
            return list1
        
        while list1 and list2:
            if list1.val>list2.val:
                cur.next = list2
                list2 = list2.next
                cur = cur.next
            else:
                cur.next = list1
                list1 = list1.next
                cur = cur.next
                
        if list1:
            cur.next = list1
        elif list2:
            cur.next = list2     

        return top.next
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        while len(lists) > 1:
            new_lists = []
            for i in range(0, len(lists), 2):
                if i + 1 < len(lists):
                    merged = self.mergeTwoLists(lists[i], lists[i+1])
                else:
                    merged = lists[i]
                new_lists.append(merged)
            lists = new_lists
        
        return lists[0] if lists else None
