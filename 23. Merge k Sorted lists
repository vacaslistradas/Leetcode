# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """

        lists = [lst for lst in lists if lst]
        if not lists:
            return None
        
        # Create a heap of (node value, node) tuples for the first node of each list
        heap = [(lst.val, lst) for lst in lists]
        heapq.heapify(heap)
        
        # Create a dummy node to serve as the head of the merged list
        dummy = ListNode(0)
        cur = dummy
        
        # Repeat until the heap is empty
        while heap:
            # Pop the smallest (node value, node) tuple from the heap
            _, node = heapq.heappop(heap)
            
            # Append the node to the merged list
            cur.next = node
            cur = cur.next
            
            # If the node has a next node, push it to the heap
            if node.next:
                heapq.heappush(heap, (node.next.val, node.next))
        
        return dummy.next
